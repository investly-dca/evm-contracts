// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.20;

import "forge-std/Test.sol";

import "../src/IERC20.sol";
import "../src/InvestlyLogic.sol";
import "../src/InvestlyState.sol";

contract ForkTest is Test {
    address constant ZERO_X_EXCHANGE_PROXY_ADDRESS = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;
    address constant ORALLY_EXECUTORS_REGISTRY = 0xa5d1D2f23DaD7fDbB57BE3f0961a3D4ffdd4039A;

    address constant USDT_ADDRESS = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;
    address constant UNI_ADDRESS = 0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0;
    address constant USER = 0x2D60362EA2Ef3c4ffe80d237527Cf2a037A31919;

    uint256 arbitrumFork;
    InvestlyState investlyState;
    InvestlyLogic investlyLogic;
    IERC20 usdt;

    function setUp() public {
        arbitrumFork = vm.createFork("https://arbitrum-mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID");
        vm.selectFork(arbitrumFork);

        investlyState = new InvestlyState();
        investlyLogic = new InvestlyLogic(ORALLY_EXECUTORS_REGISTRY, address(investlyState), ZERO_X_EXCHANGE_PROXY_ADDRESS);
        usdt = IERC20(USDT_ADDRESS);

        vm.startPrank(USER);
        usdt.approve(address(investlyLogic), 10000000);
        vm.stopPrank();
    }

    function testAddSubscriptionWithDeposit() public {
        vm.selectFork(arbitrumFork);

        vm.startPrank(USER);

        investlyLogic.addSubscriptionWithDeposit(
            USDT_ADDRESS,
            UNI_ADDRESS,
            1000000,
            ZERO_X_EXCHANGE_PROXY_ADDRESS,
            ZERO_X_EXCHANGE_PROXY_ADDRESS,
            0x415565b0000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000fa7f8980b0f1e64a2062791cc3b0871572f1f7f000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000014e97dfd8aa052b00000000000000000000000000000000000000000000000000000000000000afd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000fa7f8980b0f1e64a2062791cc3b0871572f1f7f000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000014f188d1d301bbc000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002bfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90001f4fa7f8980b0f1e64a2062791cc3b0871572f1f7f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fa7f8980b0f1e64a2062791cc3b0871572f1f7f0000000000000000000000000000000000000000000000000000080ad44861691000000000000000000000000ad01c20d5886137e056775af56915de824c8fce50000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000002c22c7697455921f81b6070be51413d342e866cd00000000000000000000000000000000f289360bb7da3625d180615a837c998f,
            0,
            10000000
        );
        uint subId = 1;

        // check deposited user balance
        assertEq(investlyState.tokenBalances(USER, subId).amount, 10000000);

        // usdt balance should be increased
        assertEq(usdt.balanceOf(address(investlyState)), 10000000);

        // should subscription be added
        assertEq(investlyState.subscriptions(subId).sellToken, USDT_ADDRESS);
        assertEq(investlyState.subscriptions(subId).user, USER);

        // should userSubscriptions be updated
        assertEq(investlyState.userSubscriptions(USER).length, 1);

        // should events be emitted
//        assertEmitted(investlyLogic, "SubscriptionAdded");
//        assertEmitted(investlyLogic, "Deposit");

        vm.stopPrank();
    }

    function testWithdrawToken() public {


    }
}
